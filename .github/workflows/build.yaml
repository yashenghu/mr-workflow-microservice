---
name: Build And Deploy

on:
  workflow_call:
    inputs:
      environment:
        type: string
      tag:
        type: string
        default: latest
      level:
        type: string
    secrets:
      ASSUME_ROLE:
        required: true
      DEVOPS_TOKEN:
        required: true
      S3_REPO_USERNAME:
        required: true
      S3_REPO_PASSWORD:
        required: true

permissions:
  id-token: write
  contents: write

jobs:
  build:
    name: build
    runs-on: [self-hosted]
    environment: ${{ inputs.level }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup Maven
        uses: stCarolas/setup-maven@v4.2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: 'maven'

      - name: Build with Maven
        env:
          S3_REPO_USERNAME: ${{ secrets.S3_REPO_USERNAME }}
          S3_REPO_PASSWORD: ${{ secrets.S3_REPO_PASSWORD }}
        run: |
          mvn -U clean test compile deploy --settings .maven-settings/settings.xml \
            -Ds3.username=$S3_REPO_USERNAME -Ds3.password=$S3_REPO_PASSWORD
          mvn package -Dmaven.test.skip=true --settings .maven-settings/settings.xml \
            -Ds3.username=$S3_REPO_USERNAME -Ds3.password=$S3_REPO_PASSWORD
          mvn -Dexec.executable='echo' \
            -Dexec.args='${project.version}' --non-recursive exec:exec -q > mvn-version
          mkdir archive
          cp mvn-version archive
          cp Dockerfile archive
          cp api/target/app.jar archive
          cp -r scripts/* archive

      - name: Archive project artifacts
        uses: actions/upload-artifact@v2
        with:
          name: project-artifacts
          path:
            archive
          retention-days: 1

  build-push:
    name: build-push
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: project-artifacts
          path:
            archive

      - name: restore project artifacts
        run: |
          export VERSION=`cat archive/mvn-version`
          cp archive/Dockerfile .
          mkdir -p target
          cp archive/app.jar target/
          mkdir -p scripts
          cp -r archive/* scripts/

      - name: Assume Role MR Prod To Pull Base Image
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.MRPROD_ASSUME_ROLE_ARN }}
          aws-region: ap-southeast-2
          role-session-name: githubActionSession

      - name: Login to Amazon ECR As Prod
        id: login-ecr-prod
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull Prod base image
        run: |
          # Start pulling prod base image
          docker pull 515749285499.dkr.ecr.ap-southeast-2.amazonaws.com/mr-base:jre11

      - name: Configure AWS credentials from ECR account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.ASSUME_ROLE }}
          aws-region: ap-southeast-2
          role-session-name: githubActionSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mr-template-microservice
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    name: Deploy mr-template-microservice to ${{ inputs.environment }}
    needs: build-push
    runs-on: [self-hosted]
    steps:
      - name: Checkout helm chart scripts
        uses: actions/checkout@v2
        with:
          repository: mjgaletto/helm-charts
          ref: master
          token: ${{ secrets.DEVOPS_TOKEN }}
          path: helm-charts

      - name: Assume Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.ASSUME_ROLE }}
          aws-region: ap-southeast-2
          role-session-name: githubActionSession

      - name: Deploy to EKS
        working-directory: helm-charts
        run: |
          source ./scripts/functions.sh
          aws eks update-kubeconfig --region ap-southeast-2 --name "${{ inputs.environment }}-cluster"
          bash ./deploy.sh mr-template-microservice "${{ inputs.environment }}" ${{ inputs.tag}}
